# =============================================================================
# OIDC Configuration
# =============================================================================
# Это настройки OAuth 2.0 / OpenID Connect для аутентификации пользователей

# URL вашего OIDC провайдера (без trailing slash)
# Примеры:
#   - Google: https://accounts.google.com
#   - GitHub: https://github.com/login/oauth
#   - Keycloak: https://your-keycloak.com/realms/your-realm
#   - Auth0: https://your-tenant.auth0.com
OIDC_ISSUER=https://your-oidc-provider.com

# Client ID из настроек вашего OAuth приложения
# Получается при регистрации приложения в IdP
# Это публичный идентификатор, но всё равно держите в .env
OIDC_CLIENT_ID=your-client-id

# Client Secret из настроек вашего OAuth приложения
# ⚠️ ВАЖНО: Это секрет! Никогда не коммитьте его в git
# Используется только на сервере для обмена кода на токены
OIDC_CLIENT_SECRET=your-client-secret

# URL для callback после успешной авторизации
# Должен совпадать с настройками в IdP
# В production замените на реальный домен:
#   - https://yourdomain.com/auth/callback
OIDC_REDIRECT_URI=http://localhost:5173/auth/callback

# =============================================================================
# Node Environment
# =============================================================================
# development - для локальной разработки (cookies без secure flag)
# production  - для production (cookies с secure flag, требует HTTPS)
NODE_ENV=development

# =============================================================================
# Session Storage (Production)
# =============================================================================
# По умолчанию используется in-memory хранилище (только для dev)
# Для production настройте Redis или PostgreSQL

# Redis (рекомендуется для production)
# Установка: npm install ioredis
# Локально: docker run -d -p 6379:6379 redis:alpine
# Production примеры:
#   - Upstash: redis://default:xxx@xxx.upstash.io:6379
#   - Railway: redis://default:xxx@xxx.railway.app:6379
#   - Redis Cloud: redis://default:xxx@xxx.cloud.redislabs.com:6379
REDIS_URL=redis://localhost:6379

# PostgreSQL (если уже используете Postgres)
# Установка: npm install pg
# Формат: postgresql://user:password@host:port/database
# Не забудьте создать таблицу! SQL в src/lib/server/auth/stores/postgres.ts
# DATABASE_URL=postgresql://postgres:password@localhost:5432/mydb

# =============================================================================
# Получение credentials для популярных провайдеров
# =============================================================================
#
# Google OAuth:
#   1. https://console.cloud.google.com/apis/credentials
#   2. Создать OAuth 2.0 Client ID
#   3. Добавить redirect URI: http://localhost:5173/auth/callback
#   4. OIDC_ISSUER=https://accounts.google.com
#
# GitHub OAuth:
#   1. https://github.com/settings/developers
#   2. New OAuth App
#   3. Authorization callback URL: http://localhost:5173/auth/callback
#   4. OIDC_ISSUER=https://github.com/login/oauth
#
# Keycloak:
#   1. Создать клиент в вашем realm
#   2. Access Type: confidential
#   3. Valid Redirect URIs: http://localhost:5173/auth/callback
#   4. OIDC_ISSUER=https://your-keycloak.com/realms/your-realm
#
# Auth0:
#   1. https://manage.auth0.com/dashboard
#   2. Applications → Create Application → Regular Web App
#   3. Allowed Callback URLs: http://localhost:5173/auth/callback
#   4. OIDC_ISSUER=https://your-tenant.auth0.com
#
# =============================================================================
# Быстрый старт с Redis (локально)
# =============================================================================
#
# 1. Запустите Redis локально:
#    docker run -d --name redis -p 6379:6379 redis:alpine
#
# 2. Установите зависимость:
#    npm install ioredis
#
# 3. Раскомментируйте Redis конфигурацию в:
#    src/lib/server/auth/index.ts
#
# 4. Перезапустите приложение:
#    npm run dev
#
# =============================================================================
